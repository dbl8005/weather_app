---
description: Making sure the architecture is consistent
globs: 
---
# Architecture Guidelines

## Core Concepts Explained
1. **Clean Architecture**: Separates code into layers for better maintainability
   - Presentation Layer: What users see and interact with
   - Domain Layer: Business rules and logic
   - Data Layer: Data handling and external services

2. **MVVM Pattern**: 
   - Model: Data structure
   - View: UI elements
   - ViewModel (BLoC): Manages UI state and business logic

3. **BLoC Pattern**: Manages state like a box that:
   - Receives events (user actions)
   - Processes them
   - Outputs states (UI updates)

## Feature-First Project Structure

lib/
├── core/                    # Shared code used across features
│   ├── constants/
│   ├── theme/
│   ├── widgets/
│   └── utils/
│
├── features/               # All app features
│   ├── feature_name/      # Each feature has its own folder
│   │   ├── data/         # Data layer
│   │   │   ├── models/
│   │   │   ├── repositories/
│   │   │   └── datasources/
│   │   ├── domain/       # Domain layer
│   │   │   ├── entities/
│   │   │   └── usecases/
│   │   └── presentation/ # Presentation layer
│   │       ├── pages/
│   │       ├── widgets/
│   │       └── bloc/
│   └── another_feature/   # Another feature follows same structure
└── di/                    # Dependency injection setup

## File Naming Conventions
- Entities: `*_entity.dart`
- Models: `*_model.dart`
- BLoCs: `*_bloc.dart`
- Events: `*_event.dart` (can be in bloc file)
- States: `*_state.dart` (can be in bloc file)
- Pages: `*_page.dart`
- Widgets: `*_widget.dart`
- Repositories: `*_repository.dart`
- Data Sources: `*_data_source.dart`
- Use Cases: `*_usecase.dart`

## Recommended Packages
- `flutter_bloc`: State management
- `get_it`: Dependency injection
- `injectable`: Code generation for DI
- `freezed`: Immutable models (reduces boilerplate)
- `dio`: Network requests
- `shared_preferences`: Local storage
- `json_serializable`: JSON serialization

## Best Practices
1. Keep features isolated and independent
2. One BLoC per feature (split if grows too large)
3. Use repositories to abstract data sources
4. Handle errors properly at each layer
5. Write unit tests for BLoCs and repositories
6. Use dependency injection for better testability
7. Keep UI components small and reusable

## Development Flow
1. Create feature folder structure
2. Define entities (core business objects)
3. Create data models and repositories
4. Implement BLoC with events and states
5. Build UI components
6. Connect UI with BLoC
7. Test feature functionality

## UI/UX Guidelines

### Theme Management
1. Use consistent theming across the app:
   - Define primary and secondary colors
   - Maintain consistent text styles
   - Use proper spacing and padding
   - Support both light and dark themes

2. Theme Structure:
lib/core/theme/
├── app_colors.dart # Color constants
├── app_text_styles.dart # Typography styles
├── app_spacing.dart # Padding/margin constants
├── app_animations.dart # Animation durations/curves
└── app_theme.dart # Theme configuration


### Animation Guidelines
1. Use animations purposefully:
   - Page transitions (slide, fade)
   - Loading states (shimmer, spinner)
   - State changes (expand/collapse)
   - User interactions (button press, swipe)
   - Error/success feedback

2. Animation Best Practices:
   - Keep animations under 300ms for responsiveness
   - Use built-in Flutter animations when possible
   - Implement custom animations for unique interactions
   - Ensure animations are smooth (60fps)
   - Consider reduced motion settings
   - Use const Duration for consistent timing

### UI Component Guidelines
1. Design Consistency:
   - Use consistent corner radius (8dp, 12dp, 16dp)
   - Maintain proper spacing hierarchy (8dp, 16dp, 24dp)
   - Follow Material Design 3 guidelines
   - Implement proper error states with feedback
   - Show loading states when fetching data
   - Use elevation and shadows purposefully

2. Responsive Design:
   - Support different screen sizes
   - Handle orientation changes
   - Consider tablet layouts
   - Implement proper keyboard handling
   - Use flexible widgets (Expanded, Flexible)
   - Implement proper safe area handling

3. Accessibility:
   - Use semantic labels
   - Maintain proper contrast ratios (4.5:1 minimum)
   - Support screen readers
   - Consider text scaling (up to 200%)
   - Implement proper focus handling
   - Support system accessibility settings

### Recommended UI Packages
- `flutter_screenutil`: Responsive sizing
- `animations`: Pre-built animations
- `shimmer`: Loading effects
- `flutter_animate`: Easy animations
- `google_fonts`: Custom typography
- `flutter_svg`: SVG support

